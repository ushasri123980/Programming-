Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105





class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> triplets;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++)
        {
            if(nums[0]>0)
            {
                return {};
            }
            else if(i>0 && nums[i]==nums[i-1]) //should not repeat same triplets
                continue;
           int j=i+1;
            int k=nums.size()-1;
            while(j<k)
            {
                if(nums[i]+nums[j]+nums[k]==0)
                {
                    triplets.push_back({nums[i],nums[j],nums[k]});
                    int m=nums[j];
                    int n=nums[k];
                    while(j<k && nums[j]==m) //not to repeat same triplets
                    {
                       j++;
                    }
                    while(j<k && nums[k]==n)
                    {
                        k--;
                    }
                }
                else
                {
                    if(nums[i]+nums[j]+nums[k]>0)
                    {
                        k--;
                    }
                    else
                    {
                        j++;
                    }
                }
            }
        }
        return triplets;
    }
};
