Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.





class Solution {
public:
    void sortColors(vector<int>& nums) {
        int i=0;
        int start=0;
        int ending=nums.size()-1;        
        while(i<=ending)
        {
            if(nums[i]==2)
            {
                int temp=nums[i];
                nums[i]=nums[ending];
                nums[ending]=temp;
                ending--;
            }
            else if(nums[i]==0)
            {
                int temp=nums[i];
                nums[i]=nums[start];
                nums[start]=temp;
                start++;
                i++;
            }
            else
            {
                i++;
            }
// for(int j=0;j<nums.size();j++)
//         {

//             cout<<nums[j]<<" ";
//         }
//         cout<<"i:"<<i<<"start:"<<start<<"end:"<<ending;
//         cout<<endl;
        }
    
    }
};
